set viminfo=%,'50,\"100,n~/.viminfo

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
" DIRECTORIES AND FILES
"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" "put swap files in a fixed place
set dir=~/.vim/swp//

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" "
" "FIXES"
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"fix that backspace generates 
"map!  

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
" FEATURES
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


"Turn color highlighting on
syntax on


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
" BEHAVIOR
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"dont show unprintable chars unless specified (set list)
set nolist

"dont like autchdir since its annoying..
nnoremap ,cd :cd %:p:h<CR>:pwd<CR>
nnoremap ,e :e <C-R>=expand('%:p:h') . '/'<CR>
cabbr <expr> %% expand('%:p:h')

"Highlight searches
:set hlsearch

"block    Allow virtual editing in Visual block mode.
"Virtual editing means that the cursor can be positioned where there is no actual character
set virtualedit=block

"This setting will cause the cursor to very briefly jump to a brace/parenthese/bracket's "match" whenever you type a closing
"or opening brace/parenthese/bracket. I've had almost no mismatched-punctuation errors since I started using this setting.
set showmatch

" Ignore case in searches excepted if an uppercase letter is used (Both ignorecase and smartcase must be set for this)
set ignorecase
set smartcase

" make that backspace key work the way it should
" allow <BkSpc> to delete line breaks, beyond the start of the current
" insertion, and over indentations:
set backspace=eol,start,indent

" don't make it look like there are line breaks where there aren't:
set nowrap

" use indents of 2 spaces, and have them copied down lines:
"Set spaces to insert when indenting ie. not inserting spaces between literals <TAB>
set shiftwidth=2
"Set spaces to insert when inserting spaces between literals <ctrl-TAB>
set softtabstop=2 " makes the spaces feel like real tabs, i.e. backspace deletes 2 spaces
set tabstop=4 " Force tabs to be displayed/expanded to 4 spaces (instead of default 8).
set shiftround
set expandtab
set autoindent
" make it so you can open other files without being forced to save current buffer...
set hidden 
" This defines what bases Vim will consider for numbers when using the CTRL-A and CTRL-X commands (default: nrformats=octal,hex)
set nrformats="hex"
" use mouse even in non gui mode
set mouse=a
" have command-line completion <Tab> (for filenames, help topics, option names)
" first list the available options and complete the longest common part, then
" have further <Tab>s cycle through the possibilities:
set wildmenu
set wildmode=list:longest,list:full

"integrate with systembuffer (auto "+)
if has('unnamedplus')
    set clipboard=unnamed,unnamedplus
endif

autocmd FileType make set noexpandtab



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
" WINDOWS AND SPLITS
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"split to the right 
set splitright

" window
nmap <leader>sw<left>  :topleft  vnew<CR>
nmap <leader>sw<right> :botright vnew<CR>
nmap <leader>sw<up>    :topleft  new<CR>
nmap <leader>sw<down>  :botright new<CR>
" buffer
nmap <leader>s<left>   :leftabove  vnew<CR>
nmap <leader>s<right>  :rightbelow vnew<CR>
nmap <leader>s<up>     :leftabove  new<CR>
nmap <leader>s<down>   :rightbelow new<CR>
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
" APPEARANCE
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"show tabs, EOL etc.
set list
set lcs=tab:??   "show tabs
set lcs+=trail:? "show trailing spaces


"Turn completion popup off 
"   set completeopt=

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Files/Backups
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" make backup file
set backup
set writebackup

" where to put backup file (don't forget to make a backup directory)
set backupdir=~/.vim/backup//

" directory is the directory for temp file
set directory=~/.vim/tmp//

let $TMPDIR="~/.vim/tmp"

set undodir=~/.vim/undodir
set undofile


:au BufWritePre * let &backupext = '_' . strftime("%Y%m%d_%Hh")

:let backupskip = escape(expand('$HOME'), '\') . '/tmp/*' . ',' . '*.sig' . ',' . '^tmp\d\d\d\d\d'

"lets not use some silly ecoding other than utf-8
:set encoding=utf-8
:set fileencodings=utf-8

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Header related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:SV_AuthorName   = 'Ashraf Mian'
let g:SV_Department   = 'EAB/FBM/RF'
let g:SV_Email        = 'ashraf.mian@ericsson.com'
let g:SV_Company      = 'Ericsson AB'
let g:SV_Project      = ''
let g:SV_AuthorRef    = 'EASHMIA'
let g:SV_CopyrightHolder = 'Ericsson'

let g:call_arg        = 'Default CALL_ARG'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
" KEY BINDINGS/MAPPINGS
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let mapleader="\<Space>"


"editing files using relative path to file
"name of file 
cnoremap %& <C-R>=fnameescape(expand('%:t'))<cr>
"path to file 
cnoremap %% <C-R>=fnameescape(expand('%:h')).'/'<cr>
map <leader>ew :e %%
map <leader>es :sp %%
map <leader>ev :vsp %%
map <leader>et :tabe %%


"moving around in widows
"map <Leader>w <C-w>w
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h



cnoremap <C-a> <Home>
cnoremap <C-e> <End>
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>
cnoremap <C-b> <Left>
cnoremap <C-f> <Right>
cnoremap <M-b> <S-Left>
cnoremap <M-f> <S-Right>

"Some ctags shortcuts
map <leader>ta <C-]>
map <leader>ts <C-w><C-]>
map <leader>tv  :vsp <CR>:exec("tag ".expand("<cword>"))<CR>

map <Leader>nn ]'
map <Leader>pp ['
"Use alt-space as escape -- works even on a (Linux) console:
inoremap <M-Space> <Esc>

" have <Tab> (and <Shift>+<Tab> where it works) change the level of
" indentation:
inoremap <Tab> <C-T>
inoremap <S-Tab> <C-D>
" [<Ctrl>+V <Tab> still inserts an actual tab character.]

" have \tp ("toggle paste") toggle paste on/off and report the change, and
" where possible also have <F4> do this both in normal and insert mode:
nnoremap \tp :set invpaste paste?<CR>
nmap <F4> \tp
imap <F4> <C-O>\tp
map <Leader>p :set paste<CR>o<esc>"*]p:set nopaste<cr>
set pastetoggle=<F4>
" Emacs-like beginning and end of line.
imap <c-e> <c-o>$
imap <c-a> <c-o>^
"
" disable highlight after search
" not needed with incsearch plugin
" map <F2>  :noh <CR> 

" list buffer then choose one
:nnoremap <F5> :buffers<CR>:buffer<Space>
":nnoremap <F6> :NERDTreeFind<CR>
" TAGS
"jump to tag
map <Leader>. 

map <Leader>' 
map <Leader>: :ts 
map <Leader>_ }
map <Leader>- :pc

" :Q => :q 
command! Q q
command! W w
" Map ctrl-x to escape to get a more convinient environment
"imap <C-x> <ESC>


"map <C-z> :echo "BLOCKED: The 'CTRL-Z' quit functionality has been disabled. Please use ':q' instead"

"Removes white space at end of line
"nnoremap <F8> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>remap <F8> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>
"toggle remove special characters and wrap lines around word
:nnoremap <F7> :set invlist invwrap invlinebreak<CR> 
nnoremap <F8> :%s:\s*$::<CR>
:nnoremap <F9> :setl noai nocin nosi inde=<CR>
"| :%s:\t:  :g<CR>


""""""""""""""""" fzf mapping """"""""""""""""""""""""""""""""""
map '' :Buffers <CR>
map ,b :Buffers <CR>
map ,f :Files <CR>
map ,l :Lines <CR>
map ,B :BLines <CR>

" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

" Advanced customization using autoload functions
inoremap <expr> <c-x><c-k> fzf#vim#complete#word({'left': '15%'})


""""""""""""""""" ALE """"""""""""""""""""""""""""""""""
let g:airline#extensions#ale#enabled = 1
"open loclist  
let g:ale_open_list = 1


""""""""""""""""" easy align """"""""""""""""""""""""""""""""""

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)


"
" MISC
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set noerrorbells
set visualbell
autocmd VimEnter * set vb t_vb=


" default is: set complete=.,w,b,u,t,i   where  the 't' is for tags
" see http://www.vim.org/htmldoc/options.html#%27complete%27
set complete=.,w,b,u,i


"""""""""""file paths and stuff
" show file name 
nnoremap <Leader>ff :<Esc>:echo expand('%:p')<cr>
" Copy current buffer path relative to root of VIM session to system clipboard
nnoremap <Leader>yp :let @*=expand("%")<cr>:echo "Copied file path to clipboard"<cr>
" Copy current filename to system clipboard
nnoremap <Leader>yf :let @*=expand("%:t")<cr>:echo "Copied file name to clipboard"<cr>
" Copy current buffer path without filename to system clipboard
nnoremap <Leader>yd :let @*=expand("%:h")<cr>:echo "Copied file directory to clipboard"<cr>



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
" plugin manager
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"vim plug
call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-abolish'
Plug 'tpope/vim-eunuch' 
Plug 'tpope/vim-fugitive' 
Plug 'tpope/vim-surround' 
Plug 'tpope/vim-unimpaired' 
Plug 'airblade/vim-gitgutter' 
Plug 'mileszs/ack.vim' 
Plug 'w0rp/ale' 
Plug 'google/yapf' 
Plug 'timothycrosley/isort' 
Plug 'Yggdroot/indentLine' 
Plug 'davidhalter/jedi-vim' 
Plug 'metakirby5/codi.vim' 
Plug 'kien/ctrlp.vim' 
Plug 'junegunn/fzf.vim' 
Plug 'gregsexton/gitv' 
Plug 'haya14busa/incsearch.vim' 
Plug 'Shougo/neocomplete.vim' 
Plug 'scrooloose/nerdcommenter' 
Plug 'scrooloose/nerdtree' 
Plug 'fs111/pydoc.vim' 
Plug 'godlygeek/tabular' 
"Plug 'majutsushi/tagbar' 
Plug 'mbbill/undotree' 
Plug 'vhda/verilog_systemverilog.vim' 
Plug 'jmcneal/verilog-support' 
Plug 'bling/vim-airline' 
Plug 'vim-airline/vim-airline-themes' 
Plug 'sophacles/vim-bundle-mako' 
Plug 'altercation/vim-colors-solarized' 
Plug 'lokaltog/vim-easymotion' 
Plug 'junegunn/vim-easy-align' 
Plug 'szw/vim-maximizer' 
Plug 'vim-perl/vim-perl' 
Plug 'powerman/vim-plugin-AnsiEsc' 
Plug 'kshenoy/vim-signature' 
Plug 'honza/vim-snippets' 
Plug 'christoomey/vim-tmux-navigator' 
Plug 'liuchengxu/space-vim-dark'
Plug 'vim-python/python-syntax'
Plug 'michaeljsmith/vim-indent-object'
Plug 'RRethy/vim-illuminate'
Plug 'inside/vim-search-pulse'
Plug 'terryma/vim-smooth-scroll'
Plug 'luochen1990/rainbow'

call plug#end()
"indentline plugin setting
 let g:indentLine_color_term = 239
 let g:indentLine_color_gui = '#A4E57E'
 " none X terminal
 let g:indentLine_color_tty_light = 7 " (default: 4)
 let g:indentLine_color_dark = 1 " (default: 2)
 " Background (Vim, GVim)
 let g:indentLine_bgcolor_term = 202
 let g:indentLine_bgcolor_gui = '#FF5F00'
 let g:indentLine_enabled = 0
 let g:verilog_syntax_fold_lst = 'all'

 " illuminate vistual 
 hi link illuminatedWord Visual

 " vim smooth scroll
noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 5, 2)<CR>
noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 5, 2)<CR>
noremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 5, 4)<CR>
noremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 5, 4)<CR>

"pulse duration 
let g:vim_search_pulse_duration = 500

"rainbow 
let g:rainbow_active = 1
